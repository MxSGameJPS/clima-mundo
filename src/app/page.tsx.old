"use client";

import { useState } from "react";
import Card from "@/components/Card";
import { fetchWeather } from "@/lib/fetchWeather";
import type { CardProps } from "@/types/card";
import Header from "@/components/Header";
import styles from "./page.module.css";

export default function Home() {
  const [cardData, setCardData] = useState<CardProps | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  async function handleSearch(city: string) {
    setLoading(true);
    setError("");
    try {
      const weather = await fetchWeather(city);

      // Verificar se todos os dados necessários existem
      if (
        !weather ||
        !weather.location ||
        !weather.forecast ||
        !weather.forecast.forecastday ||
        !weather.forecast.forecastday[0]
      ) {
        throw new Error("Dados incompletos da API.");
      }      const forecastDay = weather.forecast.forecastday[0];
      
      // Utilizando a data atual formatada no padrão brasileiro
      const hoje = new Date();
      const formattedDate = `${hoje.getDate().toString().padStart(2, "0")}/${(
        hoje.getMonth() + 1
      )
        .toString()
        .padStart(2, "0")}/${hoje.getFullYear()}`;

      setCardData({
        cidade: weather.location.name,
        data: formattedDate,
        resumo: forecastDay.day.condition.text,
        tempMin: forecastDay.day.mintemp_c,
        tempMax: forecastDay.day.maxtemp_c,
        chuva: `${forecastDay.day.totalprecip_mm}mm - ${forecastDay.day.daily_chance_of_rain}%`,
        vento: `${forecastDay.day.maxwind_kph}km/h`,
        umidade: `${forecastDay.day.avghumidity}%`,
        nascerSol: forecastDay.astro.sunrise,
        porSol: forecastDay.astro.sunset,
        arcoIris:
          forecastDay.day.daily_chance_of_rain > 30 && weather.current.uv > 3
            ? "Possibilidade de formação de arco-íris"
            : "Sem probabilidade de formação de arco-íris",
        periodos: [
          { label: "Madrugada", icon: "/icons/night.png" },
          { label: "Manhã", icon: "/icons/morning.png" },
          { label: "Tarde", icon: "/icons/afternoon.png" },
          { label: "Noite", icon: "/icons/night.png" },
        ],
        hourly: forecastDay.hour.map((h) => ({
          hour: `${h.time.split(" ")[1].slice(0, 2)}h`,
          temp: Math.round(h.temp_c),
          icon: h.condition.icon.replace(/^\//, "https://"),
        })),
      });
    } catch (err) {
      setCardData(null);
      setError(
        err instanceof Error
          ? err.message
          : "Cidade não encontrada ou erro na API."
      );
    } finally {
      setLoading(false);
    }
  }
  return (
    <main style={{ backgroundColor: "#f0f2f5", minHeight: "100vh", padding: "0 0 32px 0" }}>
      <Header onSearch={handleSearch} />
      <div style={{ maxWidth: "800px", margin: "0 auto", padding: "0 16px" }}>
        {loading && (
          <div style={{ textAlign: "center", padding: "20px" }}>
            <div style={{ display: "inline-block", width: "30px", height: "30px", border: "3px solid #013a6e", borderRadius: "50%", borderTopColor: "transparent", animation: "spin 1s linear infinite" }}></div>
            <style jsx>{`
              @keyframes spin {
                to { transform: rotate(360deg); }
              }
            `}</style>
          </div>
        )}
        {error && (
          <div style={{ 
            color: "#721c24", 
            backgroundColor: "#f8d7da", 
            padding: "12px 20px", 
            borderRadius: "8px",
            margin: "20px auto",
            maxWidth: "500px",
            textAlign: "center",
            boxShadow: "0 2px 4px rgba(0,0,0,0.1)"
          }}>
            {error}
          </div>
        )}
        {cardData && <Card {...cardData} />}
        {!cardData && !loading && !error && (
          <div style={{ 
            textAlign: "center", 
            margin: "40px auto", 
            padding: "30px", 
            backgroundColor: "#e9ecef", 
            borderRadius: "12px",
            maxWidth: "500px"
          }}>
            <h2 style={{ color: "#013a6e", marginBottom: "16px" }}>Bem-vindo ao Clima Mundo</h2>
            <p style={{ color: "#495057", marginBottom: "20px" }}>
              Busque por uma cidade para ver a previsão do tempo atualizada.
            </p>
          </div>
        )}
      </div>
    </main>
  );
}
